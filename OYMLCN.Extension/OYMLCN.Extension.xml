<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OYMLCN.Extension</name>
    </assembly>
    <members>
        <member name="T:OYMLCN.Extensions.DateTimeExtensions">
            <summary>
            DateTimeExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.AsFormat(System.DateTime)">
            <summary>
            时间相关值以及判断操作
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetGetYearStart(System.DateTime)">
            <summary>
            年 开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetYearEnd(System.DateTime)">
            <summary>
            年 结束时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetMonthStart(System.DateTime)">
            <summary>
            月 开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetMonthEnd(System.DateTime)">
            <summary>
            月 结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetWeekStart(System.DateTime)">
            <summary>
            周(日)开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetWeekEnd(System.DateTime)">
            <summary>
            周(日)结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetWeekStartByMonday(System.DateTime)">
            <summary>
            周(一)开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetWeekEndByMonday(System.DateTime)">
            <summary>
            周(一)结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetDayStart(System.DateTime)">
            <summary>
            天 开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetDayEnd(System.DateTime)">
            <summary>
            天 结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetHourStart(System.DateTime)">
            <summary>
            时 开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetHourEnd(System.DateTime)">
            <summary>
            时 结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetMinuteStart(System.DateTime)">
            <summary>
            分 开始时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.GetGetMinuteEnd(System.DateTime)">
            <summary>
            分 结束时间
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.IsYesterday(System.DateTime)">
            <summary>
            判断是否是昨天
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            判断是否是当天
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.IsTomorrow(System.DateTime)">
            <summary>
            判断是否是明天
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToCnMonthString(System.DateTime)">
            <summary>
            日期转换为中文 年月
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToCnDatetimeString(System.DateTime,System.Boolean)">
            <summary>
            时间转换为中文 年月日时分
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToMonthString(System.DateTime)">
            <summary>
            时间转字符 年-月
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToDateString(System.DateTime)">
            <summary>
            时间转字符 年-月-日
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToDatetimeString(System.DateTime,System.Boolean)">
            <summary>
            时间转字符 年-月-日 时:分:秒
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToTimeString(System.DateTime,System.Boolean)">
            <summary>
            时间转换 时:分
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToDayTimeString(System.DateTime,System.Boolean)">
            <summary>
            时间转换 日 时:分
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToCnIntervalString(System.DateTime)">
            <summary>
            与现在时间的间隔（中文） --前/后
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToTimestampInt64(System.DateTime)">
            <summary>
            将Datetime转换成时间戳（1970-1-1 00:00:00至target的总秒数）
            </summary>
            <param name="dateTime">DateTime</param>
            <returns>时间戳（1970-1-1 00:00:00至target的总秒数）</returns>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.ToTimestamp(System.DateTime)">
            <summary>
            将Datetime转换成时间戳（1970-1-1 00:00:00至target的总秒数）
            </summary>
            <param name="dateTime">DateTime</param>
            <returns>时间戳（1970-1-1 00:00:00至target的总秒数）</returns>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.TimestampToDateTime(System.Int64)">
            <summary>
            将时间戳（1970-1-1 00:00:00至target的总秒数）转换成Datetime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.DateTimeExtensions.TimestampToDateTime(System.Int32)">
            <summary>
            将时间戳（1970-1-1 00:00:00至target的总秒数）转换成Datetime
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.Extensions">
            <summary>
            杂项扩展
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsDefault``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            判断字典键值类型是否未赋值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="keyValuePair"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsNull(System.Object)">
            <summary>
            判断是否为Null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsNotNull(System.Object)">
            <summary>
            判断是否为非Null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空或Null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否不为空或Null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.IsFullEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断两个字典集合是否完全相等
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict1"></param>
            <param name="dict2"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            增加或更新字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取字典值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.Union``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            追加合并字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectKeyContainsValues``1(System.Collections.Generic.IDictionary{System.String,``0},System.String[])">
            <summary>
            获取字典值
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectKeyStartWithValues``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            获取字典值
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectKeyEndWithValues``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            获取字典值
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.ToHtmlAttributesString``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            拼接HTML标签属性项目
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            将字符串数组拼接成字符串
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectContains(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            搜索字符串数组
            </summary>
            <param name="list"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectStartWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            搜索字符串数组
            </summary>
            <param name="list"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.SelectEndWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            搜索字符串数组
            </summary>
            <param name="list"></param>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.ToInt32(System.Char)">
            <summary>
            CharToInt32
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.Extensions.ToChar(System.Int32)">
            <summary>
            Int32ToChar
            </summary>
            <param name="i"></param>
            <returns></returns>s
        </member>
        <member name="T:OYMLCN.Extensions.FileExtensions">
            <summary>
            FileExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.ReadToStream(System.IO.FileInfo)">
            <summary>
            获取文件流FileStream
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
            将文本信息保存到文件
            <para>如果文件已经存在则直接覆盖</para>
            </summary>
            <param name="file"></param>
            <param name="content">文本内容</param>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.Append(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            向文本文件追加文本
            </summary>
            <param name="file"></param>
            <param name="content">文本内容</param>
            <param name="appendOnEnd">在文件结尾添加，false时在文件开头添加</param>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.AppendLine(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            向文本文件追加文本
            </summary>
            <param name="file"></param>
            <param name="content">文本内容</param>
            <param name="appendOnEnd">在文件结尾添加，false时在文件开头添加</param>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
            读取文本文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetDirectoryInfo(System.String)">
            <summary>
            获取文件夹信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetAllLength(System.IO.DirectoryInfo)">
            <summary>
            获取文件夹总大小(字节)
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.FolderCopy(System.IO.DirectoryInfo,System.String)">
            <summary>
            将指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="directory"></param>
            <param name="target">目标路径路径</param>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetMD5Hash(System.IO.FileInfo)">
            <summary>
            获取路径文件的MD5码(文件不存在时返回空值)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetMD5Hash(System.IO.Stream)">
            <summary>
            计算文件流的MD5
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetSHA1Hash(System.IO.FileInfo)">
            <summary>
            获取路径文件的SHA1码(文件不存在时返回空值)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.GetSHA1Hash(System.IO.Stream)">
            <summary>
            计算文件流的SHA1
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.ToLines(System.IO.TextReader)">
            <summary>
            获取文本全部行
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.NonEmptyLines(System.IO.TextReader)">
            <summary>
            获取文本全部非空行
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FileExtensions.NonWhiteSpaceLines(System.IO.TextReader)">
            <summary>
            获取文本全部非空格行
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.FormatExtensions">
            <summary>
            FormatExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.FormatExtensions.EnumToString(System.Enum)">
            <summary>
            将枚举值转换为字符串值（替换 _ 标头）
            用于部分不能使用数字作为枚举值 用 _ 作为开头（某些较旧的源码里有这种习惯……）
            </summary>
            <param name="enumClass"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FormatExtensions.GetHost(System.Uri)">
            <summary>
            获取Uri的协议域名地址
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.FormatExtensions.ToQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            组装QueryString
            参数之间用&amp;连接，首位没有符号，如：a=1&amp;b=2&amp;c=3
            </summary>
            <param name="formData"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.LinqOrderType">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="F:OYMLCN.Extensions.LinqOrderType.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:OYMLCN.Extensions.LinqOrderType.Asc">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:OYMLCN.Extensions.LinqOrderType.Desc">
            <summary>
            倒序
            </summary>
        </member>
        <member name="T:OYMLCN.Extensions.LinqExtensions">
            <summary>
            LinqExtensions
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.LinqExtensions.TakePage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            获取分页页数据
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="page"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.LinqExtensions.TakePageAuto``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            获取分页页数据（自动获取有效数据）
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="page"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.LinqExtensions.TakePageAuto``1(System.Linq.IQueryable{``0},System.Int32,OYMLCN.Helpers.PaginationHelpers@,System.Int32)">
            <summary>
            获取分页页数据（自动获取有效数据）
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="page"></param>
            <param name="pagination">分页结果</param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.LinqExtensions.OrderByField``1(System.Linq.IQueryable{``0},System.String,OYMLCN.Extensions.LinqOrderType)">
            <summary>
            数据排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="field"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.NewtonsoftJsonExtensions">
            <summary>
            JsonExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.NewtonsoftJsonExtensions.ToJsonString``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将对象转为JSON字符串
            </summary>
            <param name="data">任意对象</param>
            <param name="settings">序列化配置</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:OYMLCN.Extensions.NewtonsoftJsonExtensions.DeserializeJsonToObject``1(System.String)">
            <summary>
            JSON字符串转换为对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.NewtonsoftJsonExtensions.ParseToJToken(System.String)">
            <summary>
            转换JSON字符串为可供查询的Array数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.NewtonsoftJsonExtensions.ToArray``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            转换JToken对象为数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.StreamExtensions">
            <summary>
            StreamExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            指定编码读取Stream数据
            </summary>
            <param name="stream"></param>
            <param name="encoder">编码格式 默认为UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.FillFormDataToStream(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            填充表单信息
            </summary>
            <param name="stream"></param>
            <param name="formData">表单信息字典</param>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.ConvertToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将Byte[]转换为字符串
            </summary>
            <param name="bytes"></param>
            <param name="encoder">默认使用UTF-8进行编码</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.ToBytes(System.IO.Stream)">
            <summary>
            将Stream转换为Byte[]
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.ToStream(System.Byte[])">
            <summary>
            将Byte转换为Stream
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.WriteToFile(System.IO.Stream,System.String)">
            <summary>
            将Stream保存到文件
            </summary>
            <param name="memoryStream"></param>
            <param name="fileName">文件的相对路径或绝对路径</param>
        </member>
        <member name="M:OYMLCN.Extensions.StreamExtensions.WriteToFile(System.Byte[],System.String)">
            <summary>
            将byte[]字节数组写入文件
            </summary>
            <param name="content"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:OYMLCN.Extensions.StringExtensions">
            <summary>
            StringExtension
            </summary>
            <summary>
            StringExtension
            </summary>
            <summary>
            StringExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AsHtmlFormat(System.String)">
            <summary>
            将字符串作为HTML格式文本处理
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AsUrlFormat(System.String)">
            <summary>
            将字符串作为URL格式文本处理
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AsFormat(System.String)">
            <summary>
            格式判断或格式化
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AsType(System.String)">
            <summary>
            类型相关转换
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为空/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为空/空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsEqual(System.String,System.String,System.StringComparison)">
            <summary>
            对比两个字符串是否相等
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsEqual(System.String,System.String[],System.StringComparison)">
            <summary>
            对比字符串是否与列出的相等
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsEqualIgnoreCase(System.String,System.String)">
            <summary>
            对比两个字符串是否相等（忽略大小写）
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsEqualIgnoreCase(System.String,System.String[])">
            <summary>
            对比字符串是否与列出的相等（忽略大小写）
            </summary>
            <param name="str"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.Sub(System.String,System.Int32,System.Int32)">
            <summary>
            截取字符串
            </summary>
            <param name="str"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SubString(System.String,System.Int32,System.Int32)">
            <summary>
            截取字符串
            </summary>
            <param name="str"></param>
            <param name="skipLength"></param>
            <param name="subLength"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AppendWith(System.String,System.String,System.String,System.Boolean)">
            <summary>
            拼接字符串（有分隔符）
            常用于 class 样式属性的拼接
            </summary>
            <param name="source">原属性</param>
            <param name="value">新增属性</param>
            <param name="splitKey">分隔符（默认为空格）</param>
            <param name="onEnd">新增属性位置</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitBySign(System.String,System.String,System.StringSplitOptions)">
            <summary>
            根据标志分割字符串
            </summary>
            <param name="str"></param>
            <param name="sign">分割标识</param>
            <param name="option">分割结果去重方式</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitBySignWithoutEmpty(System.String,System.String)">
            <summary>
            根据标志分割字符串(不包含空字符串)
            </summary>
            <param name="str"></param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitThenGetFirst(System.String,System.String,System.StringSplitOptions)">
            <summary>
            根据标志分割字符串后获得第一个字符串
            </summary>
            <param name="str"></param>
            <param name="sign"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitThenGetLast(System.String,System.String,System.StringSplitOptions)">
            <summary>
            根据标志分割字符串后获得最后一个字符串
            </summary>
            <param name="str"></param>
            <param name="sign">分割标志</param>
            <param name="option">分割结果去重方式</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitByMultiSign(System.String,System.String[])">
            <summary>
            根据标志分割字符串
            </summary>
            <param name="str"></param>
            <param name="signs">分割标识，多重标识</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitAuto(System.String,System.StringSplitOptions)">
            <summary>
            根据 | \ / 、 ， , 空格 中文空格 制表符空格换行 分割字符串
            </summary>
            <param name="str"></param>
            <param name="option">分割结果去重方式</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.SplitByLine(System.String)">
            <summary>
            根据换行符拆分字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.RemoveWrap(System.String,System.Byte)">
            <summary>
            去除过多的换行符
            </summary>
            <param name="text"></param>
            <param name="keep">文本中保留的换行符最大数量（文本末尾的换行将不会保留）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.RegexMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则匹配所有结果
            </summary>
            <param name="str"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ReplaceNormal(System.String,System.String,System.String[])">
            <summary>
            替换字符串
            </summary>
            <param name="str"></param>
            <param name="newValue">新值</param>
            <param name="oldValue">旧值</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ReplaceNormalWithRegex(System.String,System.String,System.String[])">
            <summary>
            使用正则匹配替换字符串
            </summary>
            <param name="str"></param>
            <param name="newValue">新值</param>
            <param name="oldValue">旧值(不能包含正则占位符)</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ReplaceIgnoreCaseWithRegex(System.String,System.String,System.String[])">
            <summary>
            使用正则匹配替换字符串（忽略大小写）
            </summary>
            <param name="str"></param>
            <param name="newValue">新值</param>
            <param name="oldValue">旧值(不能包含正则占位符)</param>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.RemoveNormal(System.String,System.String[])">
            <summary>
            移除字符串
            </summary>
            <param name="str"></param>
            <param name="word">需要移除的字符</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.RemoveNormalWithRegex(System.String,System.String[])">
            <summary>
            使用正则匹配移除字符串
            </summary>
            <param name="str"></param>
            <param name="word">需要移除的字符(不能包含正则占位符)</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.RemoveIgnoreCaseWithRegex(System.String,System.String[])">
            <summary>
            使用正则匹配移除字符串
            </summary>
            <param name="str"></param>
            <param name="word">需要移除的字符(不能包含正则占位符)</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.AllInOneLine(System.String)">
            <summary>
            将所有换行及其前后多余的空格替换掉合并为一行
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsBeginWith(System.String,System.Char)">
            <summary>
            判断字符串是否以指定字符开头
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsBeginWithAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            判断字符串是否以指定字符开头
            </summary>
            <param name="s"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsBeginWithAny(System.String,System.Char[])">
            <summary>
            判断字符串是否以指定字符开头
            </summary>
            <param name="s"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsBeginWith(System.String,System.String,System.StringComparison)">
            <summary>
            判断字符串是否以指定字符开头
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsBeginWith(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            判断字符串是否以指定字符开头
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsFinishWith(System.String,System.Char)">
            <summary>
            判断字符串是否以指定字符结尾
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsFinishWithAny(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            判断字符串是否以指定字符结尾
            </summary>
            <param name="s"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsFinishWithAny(System.String,System.Char[])">
            <summary>
            判断字符串是否以指定字符结尾
            </summary>
            <param name="s"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsFinishWith(System.String,System.String,System.StringComparison)">
            <summary>
            判断字符串是否以指定字符结尾
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.IsFinishWith(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            判断字符串是否以指定字符结尾
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.Contains(System.String,System.String[])">
            <summary>
            返回一个值，该值指示指定的子串是否出现在此字符串‘,中。
            </summary>
            <param name="str"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.TrimStartPuntuation(System.String)">
            <summary>
            去除文本开头的标点及标识符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.TrimEndPuntuation(System.String)">
            <summary>
            去除文本结尾的标点及标识符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.TrimPuntuation(System.String)">
            <summary>
            去除文本两段的标点及标识符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="F:OYMLCN.Extensions.StringExtensions.LOCALE_SYSTEM_DEFAULT">
            <summary>
            中文字符工具类
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToSimplifiedChinese(System.String)">
            <summary>
            将字符转换成简体中文
            </summary>
            <param name="source">输入要转换的字符串</param>
            <returns>转换完成后的字符串</returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToTraditionalChinese(System.String)">
            <summary>
            将字符转换为繁体中文
            </summary>
            <param name="source">输入要转换的字符串</param>
            <returns>转换完成后的字符串</returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToUnicode(System.String)">
            <summary>
            普通字符串转Unicode字符串
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.UnicodeToString(System.String)">
            <summary>
            Unicode字符串转普通字符串
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsChineseIDCard(System.String)">
            <summary>
            验证居民身份证号码
            验证支持：GB11643-1989、GB11643-1999
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsEmailAddress(System.String)">
            <summary>
            判断字符串是否是邮箱地址
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsMobilePhoneNumber(System.String)">
            <summary>
            判断字符串是否是手机号码
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsChineseRegString(System.String)">
            <summary>
            判断字符是不是汉字
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsNumeric(System.String)">
            <summary>
            判断文本是否为数字
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsInteger(System.String)">
            <summary>
            判断文本是否为整数
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatIsUnsignNumeric(System.String)">
            <summary>
            判断文本是否为正数
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatAsNumeric(System.String)">
            <summary>
            获取文本中的数字（包括小数）
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.FormatAsIntegerNumeric(System.String)">
            <summary>
            获取文本中的整数部分
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToDBC(System.String)">
            <summary>
            转化为半角字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToSBC(System.String)">
            <summary>
            转化为全角字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToLowerForASCII(System.String)">
            <summary>
            ASCII转小写
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToUpperForASCII(System.String)">
            <summary>
            ASCII转大写
            </summary>
            <param name="value"></param>
            <returns></returns> 
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
            将URL转义为合法参数地址
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.UrlDecode(System.String)">
            <summary>
            被转义的URL字符串还原
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.UrlDataEncode(System.String)">
            <summary>
            将 URL 中的参数名称/值编码为合法的格式。
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.UrlHost(System.String)">
            <summary>
            获取url字符串的的协议域名地址
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.StringFormat(System.String,System.String[])">
            <summary>
            根据占位符紧接多个字符串 即string.Format
            </summary>
            <param name="str"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.StringToArray(System.String)">
            <summary>
            分割字符串未每一个单字
            </summary>
            <param name="str">待分割字符串</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToYesOrNo(System.Boolean,System.Boolean)">
            <summary>
            将Boolean转换为Yes是或No否
            </summary>
            <param name="boolean"></param>
            <param name="cnString">是否返回中文是/否</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.StringToStream(System.String,System.Text.Encoding)">
            <summary>
            将字符串填充到Steam中
            </summary>
            <param name="str"></param>
            <param name="encoder">默认使用UTF-8进行编码</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串填充到byte[]字节流中
            </summary>
            <param name="str"></param>
            <param name="encoder">默认使用UTF-8进行编码</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.HexToBytes(System.String)">
            <summary>
            16进制字符串转换
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            16进制字符串转换
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableSByte(System.String)">
            <summary>
            转换数字字符串为可空SByte类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableByte(System.String)">
            <summary>
            转换数字字符串为可空Byte类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableShort(System.String)">
            <summary>
            转换字符串为可空Int16类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableInt(System.String)">
            <summary>
            转换字符串为可空Int32类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableLong(System.String)">
            <summary>
            转换字符串为可空Int64类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableBigInteger(System.String)">
            <summary>
            转换字符串为可空BigInteger类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableFloat(System.String)">
            <summary>
            转换字符串为可空Single/float类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableDouble(System.String)">
            <summary>
            转换字符串为可空Double类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableDecimal(System.String)">
            <summary>
            转换字符串为可空Decimal类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToSByte(System.String)">
            <summary>
            转换数字字符串为SByte类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToByte(System.String)">
            <summary>
            转换数字字符串为Byte类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToShort(System.String)">
            <summary>
            转换字符串为Int16类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToInt(System.String)">
            <summary>
            转换字符串为Int32类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToLong(System.String)">
            <summary>
            转换字符串为Int64类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToBigInteger(System.String)">
            <summary>
            转换字符串为可空BigInteger类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToFloat(System.String)">
            <summary>
            转换字符串为Single/float类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToDouble(System.String)">
            <summary>
            转换字符串为Double类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToDecimal(System.String)">
            <summary>
            转换字符串为Decimal类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToDatetime(System.String)">
            <summary>
            转换字符串为Datetime类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToDatetime(System.String,System.DateTime)">
            <summary>
            转换字符串为Datetime类型（失败时返回默认值）
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableDatetime(System.String)">
            <summary>
            转换字符串为可空Datetime类型，转换失败返回Null
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToUri(System.String)">
            <summary>
            转换网页地址为Uri(失败返回null)
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToBoolean(System.String)">
            <summary>
            将字符串转换为Boolean类型（当字符串是“true/1/yes/checked/是/对”(不区分大小写)时返回true）
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToNullableBoolean(System.String)">
            <summary>
            将字符串转换为可空Boolean类型（当字符串中包含“true/1/yes/checked/是/对”时返回true，为空时返回null）
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToCookie(System.String)">
            <summary>
            将单个Cookie字符串转换为Cookie类型
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.StringExtensions.ConvertToCookieCollection(System.String)">
            <summary>
            将Cookies字符串转换为CookieCollection集合
            </summary>
        </member>
        <member name="T:OYMLCN.Extensions.WebClientExtensions">
            <summary>
            WebClientExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.PostData(System.Net.WebClient,System.String,System.String,System.String,System.String)">
            <summary>
            向指定的URL POST数据，并返回数据
            </summary>
            <param name="wc"></param>
            <param name="url"></param>
            <param name="data"></param>
            <param name="postEncoding"></param>
            <param name="dataEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.PostJson(System.Net.WebClient,System.String,System.String,System.String,System.String)">
            <summary>
            提交Json数据
            </summary>
            <param name="wc"></param>
            <param name="url"></param>
            <param name="json"></param>
            <param name="postEncoding"></param>
            <param name="dataEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.PutData(System.Net.WebClient,System.String,System.String,System.String,System.String)">
            <summary>
            向指定的URL Put数据，并返回数据
            </summary>
            <param name="wc"></param>
            <param name="url"></param>
            <param name="data"></param>
            <param name="postEncoding"></param>
            <param name="dataEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.PutJson(System.Net.WebClient,System.String,System.String,System.String,System.String)">
            <summary>
            推送Json数据
            </summary>
            <param name="wc"></param>
            <param name="url"></param>
            <param name="json"></param>
            <param name="postEncoding"></param>
            <param name="dataEncoding"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.Delete(System.Net.WebClient,System.String,System.String)">
            <summary>
            发送Delete请求并接收数据
            </summary>
            <param name="wc"></param>
            <param name="url"></param>
            <param name="dataEncoding">返回数据编码</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.WebClientExtensions.GetSourceString(System.Net.WebClient,System.String,System.String)">
            <summary>
            获得指定 URL 的源内容
            </summary>
            <param name="wc"></param>
            <param name="uriString"></param>
            <param name="dataEncoding"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.XmlExtensions">
            <summary>
            XmlExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.DeserializeXmlString``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="xml">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.DeserializeXmlString``1(System.IO.Stream)">
            <summary>
            反序列化
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.ToXmlString``1(``0)">
            <summary>
            序列化到Xml字符串
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.ToXmlStream``1(``0)">
            <summary>
            序列化到Xml字符串流
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.ToXDocument(System.IO.Stream)">
            <summary>
            将Xml流转成XDocument
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.ToXDocument(System.String)">
            <summary>
            将Xml字符串转成XDocument
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.SelectValue(System.Xml.Linq.XDocument,System.String)">
            <summary>
            获取指定名称的元素的值
            </summary>
            <param name="xdoc"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.SelectValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            获取指定名称的元素的值
            </summary>
            <param name="xdoc"></param>
            <param name="name">元素名称</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.SelectValue(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            获取元素集合内指定名称的元素的首要值
            </summary>
            <param name="nodes"></param>
            <param name="name">元素名称</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.XmlExtensions.SelectValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            获取元素集合内指定名称的元素的所有值
            </summary>
            <param name="nodes"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Extensions.ZipExtensions">
            <summary>
            ZipExtension
            </summary>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipCompressString(System.String,System.Boolean)">
            <summary>
            将传入字符串以GZip算法压缩后，返回Base64编码字符
            </summary>
            <param name="rawString">需要压缩的字符串</param>
            <param name="removeEmpty">移除填充的 = 空符号</param>
            <returns>压缩后的Base64编码的字符串</returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipCompress(System.Byte[])">
            <summary>
            GZip压缩
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipCompress(System.IO.Stream)">
            <summary>
            GZip压缩
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipCompressToFile(System.IO.FileInfo,System.String)">
            <summary>
            GZip压缩文件
            </summary>
            <param name="file"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipDecompressString(System.String)">
            <summary>
            将传入的二进制字符串资料以GZip算法解压缩
            </summary>
            <param name="zippedString">经GZip压缩后的二进制字符串</param>
            <returns>原始未压缩字符串</returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipDecompress(System.Byte[])">
            <summary>
            GZip解压
            </summary>
            <param name="zippedData"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipDecompress(System.IO.Stream)">
            <summary>
            GZip解压
            </summary>
            <param name="zippedData"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipDecompressToFile(System.Byte[],System.String)">
            <summary>
            GZip解压文件
            </summary>
            <param name="zippedData"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:OYMLCN.Extensions.ZipExtensions.GZipDecompressToFile(System.IO.FileInfo,System.String)">
            <summary>
            GZip解压文件
            </summary>
            <param name="file"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:OYMLCN.Handlers.HtmlFormatHandler">
            <summary>
            HTML格式处理
            </summary>
        </member>
        <member name="M:OYMLCN.Handlers.HtmlFormatHandler.HtmlDecode">
            <summary>
            被转义HTML的字符串还原
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.HtmlFormatHandler.HtmlEncode">
            <summary>
            HTML转义为数据库合法模式
            </summary>
        </member>
        <member name="M:OYMLCN.Handlers.HtmlFormatHandler.RemoveHtml(System.Int32)">
            <summary>
            使用正则表达式删除Html标签
            </summary>
        </member>
        <member name="M:OYMLCN.Handlers.HtmlFormatHandler.RemoveScript">
            <summary>
            使用正则表达式删除Script标签
            </summary>
        </member>
        <member name="M:OYMLCN.Handlers.HtmlFormatHandler.ReplaceHtmlBr">
            <summary>
            替换换行Br为换行符
            </summary>
        </member>
        <member name="M:OYMLCN.Handlers.HtmlFormatHandler.RemoveSpace(System.Boolean)">
            <summary>
            字符串去除 &amp;nbsp;/&amp;ensp;/&amp;emsp;/&amp;thinsp;/&amp;zwnj;/&amp;zwj; 空格符 制表符 
            </summary>
            <param name="keepOneSpace">保留一个空格</param>
        </member>
        <member name="P:OYMLCN.Handlers.HtmlFormatHandler.Result">
            <summary>
            处理结果
            </summary>
        </member>
        <member name="T:OYMLCN.Handlers.DateTimeFormatHandler">
            <summary>
            时间相关值以及判断
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.YearStart">
            <summary>
            年 开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.YearEnd">
            <summary>
            年 结束时间
            </summary>
            <returns></returns>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.MonthStart">
            <summary>
            月 开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.MonthEnd">
            <summary>
            月 结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.WeekStart">
            <summary>
            周(日)开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.WeekEnd">
            <summary>
            周(日)结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.WeekStartByMonday">
            <summary>
            周(一)开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.WeekEndByMonday">
            <summary>
            周(一)结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DayStart">
            <summary>
            天 开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DayEnd">
            <summary>
            天 结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.HourStart">
            <summary>
            时 开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.HourEnd">
            <summary>
            时 结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.MinuteStart">
            <summary>
            分 开始时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.GetMinuteEnd">
            <summary>
            分 结束时间
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.IsToday">
            <summary>
            判断是否是当天
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.CnMonthString">
            <summary>
            日期转换为中文 年月
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.CnDateString">
            <summary>
            日期转换为中文 年月日
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.CnDatetimeString">
            <summary>
            时间转换为中文 年月日时分
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.CnDatetimeStringWithSecond">
            <summary>
            时间转换为中文 年月日 时:分:秒
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.MonthString">
            <summary>
            时间转字符 年-月
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DateString">
            <summary>
            时间转字符 年-月-日
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DatetimeString">
            <summary>
            时间转字符 年-月-日 时:分
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DatetimeStringWithSecond">
            <summary>
            时间转字符 年-月-日 时:分:秒
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.TimeString">
            <summary>
            时间转换 时:分
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.TimeStringWithSecond">
            <summary>
            时间转换 时:分:秒
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DayTimeString">
            <summary>
            时间转换 日 时:分
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.DayTimeStringWithSecond">
            <summary>
            时间转换 日 时:分:秒
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.DateTimeFormatHandler.CnIntervalString">
            <summary>
            与现在时间的间隔（中文） --前/后
            </summary>
        </member>
        <member name="T:OYMLCN.Handlers.StringFormatHandler">
            <summary>
            字符串格式相关操作
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.String2Unicode">
            <summary>
            普通字符串转Unicode字符串
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.Unicode2String">
            <summary>
            Unicode字符串转普通字符串
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsChineseIDCard">
            <summary>
            验证居民身份证号码
            验证支持：GB11643-1989、GB11643-1999
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsEmailAddress">
            <summary>
            判断字符串是否是邮箱地址
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsMobilePhoneNumber">
            <summary>
            判断字符串是否是手机号码
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsChineseRegString">
            <summary>
            判断字符是不是汉字
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsNumeric">
            <summary>
            判断文本是否为数字
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsInteger">
            <summary>
            判断文本是否为整数
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IsUnsignNumeric">
            <summary>
            判断文本是否为正数
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.Numeric">
            <summary>
            获取文本中的数字
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringFormatHandler.IntegerNumeric">
            <summary>
            获取文本中的整数部分
            </summary>
        </member>
        <member name="T:OYMLCN.Handlers.StringTypeHandler">
            <summary>
            字符串数据转换为对应类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableSByte">
            <summary>
            转换数字字符串为可空SByte类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableByte">
            <summary>
            转换数字字符串为可空Byte类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableShort">
            <summary>
            转换字符串为可空Int16类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableInt">
            <summary>
            转换字符串为可空Int32类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableLong">
            <summary>
            转换字符串为可空Int64类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableBigInteger">
            <summary>
            转换字符串为可空BigInteger类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableFloat">
            <summary>
            转换字符串为可空Single/float类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableDouble">
            <summary>
            转换字符串为可空Double类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableDecimal">
            <summary>
            转换字符串为可空Decimal类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.SByte">
            <summary>
            转换数字字符串为SByte类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Byte">
            <summary>
            转换数字字符串为Byte类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Short">
            <summary>
            转换字符串为Int16类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Int">
            <summary>
            转换字符串为Int32类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Long">
            <summary>
            转换字符串为Int64类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.BigInteger">
            <summary>
            转换字符串为可空BigInteger类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Float">
            <summary>
            转换字符串为Single/float类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Double">
            <summary>
            转换字符串为Double类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Decimal">
            <summary>
            转换字符串为Decimal类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Datetime">
            <summary>
            转换字符串为Datetime类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableDatetime">
            <summary>
            转换字符串为可空Datetime类型，转换失败返回Null
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Uri">
            <summary>
            转换网页地址为Uri(失败返回null)
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Boolean">
            <summary>
            将字符串转换为Boolean类型（当字符串是“true/1/yes/checked/是/对”(不区分大小写)时返回true）
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.NullableBoolean">
            <summary>
            将字符串转换为可空Boolean类型（当字符串中包含“是/对”时返回true）
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.Cookie">
            <summary>
            将单个Cookie字符串转换为Cookie类型
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.StringTypeHandler.ToCookieCollection">
            <summary>
            将Cookies字符串转换为CookieCollection集合
            </summary>
        </member>
        <member name="T:OYMLCN.Handlers.UrlFormatHandler">
            <summary>
            Url字符串格式处理
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.UrlFormatHandler.UrlEncode">
            <summary>
            将URL转义为合法参数地址
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.UrlFormatHandler.UrlDecode">
            <summary>
            被转义的URL字符串还原
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.UrlFormatHandler.EncodeAsUrlData">
            <summary>
            将 URL 中的参数名称/值编码为合法的格式。
            </summary>
        </member>
        <member name="P:OYMLCN.Handlers.UrlFormatHandler.UrlHost">
            <summary>
            获取url字符串的的协议域名地址
            </summary>
        </member>
        <member name="T:OYMLCN.Helpers.FormatHelpers">
            <summary>
            格式处理辅助
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.EnumToKeyValues``1(``0)">
            <summary>
            将枚举类型转换为Key/Value数组
            必须为enum枚举的任意值，其他类型将返回Null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumClass"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.QueryStringToDictionary(System.String)">
            <summary>
            QueryString拆解为字典
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.FormatBytesCapacity(System.UInt64)">
            <summary>
            格式化字节数到更大单位
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToKB(System.UInt64)">
            <summary>
            字节总量转换为KB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToMB(System.UInt64)">
            <summary>
            字节总量转换为MB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToGB(System.UInt64)">
            <summary>
            字节总量转换为GB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToKiB(System.UInt64)">
            <summary>
            字节总量转换为KiB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToMiB(System.UInt64)">
            <summary>
            字节总量转换为MiB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.FormatHelpers.BytesLengthToGiB(System.UInt64)">
            <summary>
            字节总量转换为GiB标识
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Helpers.HttpClientHelpers">
            <summary>
            HttpClient方法封装
            </summary>
        </member>
        <member name="F:OYMLCN.Helpers.HttpClientHelpers.HttpClient">
            <summary>
            全局连接
            </summary>
        </member>
        <member name="F:OYMLCN.Helpers.HttpClientHelpers.CookieContainer">
            <summary>
            全局Cookie
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.#ctor(System.Double)">
            <summary>
            HttpClient方法封装
            </summary>
            <param name="timeout">请求超时(秒)</param>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.GetString(System.String,System.Text.Encoding)">
            <summary>
            通过HttpGet获取数据
            </summary>
            <param name="url">请求Url</param>
            <param name="decoder">返回数据编码形式（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.GetString(System.String,System.String,System.Text.Encoding)">
            <summary>
            通过HttpGet获取数据
            </summary>
            <param name="url">请求Url</param>
            <param name="queryStr">请求参数字符串</param>
            <param name="decoder">返回数据编码形式（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.GetString(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding)">
            <summary>
            通过HttpGet获取数据
            </summary>
            <param name="url">请求Url</param>
            <param name="queryDir">请求参数字典集合</param>
            <param name="decoder">返回数据编码形式（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.GetData(System.String)">
            <summary>
            通过HttpGet获取数据
            </summary>
            <param name="url">请求Url</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PostString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPost提交字符数据
            </summary>
            <param name="url">请求Url</param>
            <param name="data">提交字符数据</param>
            <param name="encoder">字符数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PostJsonString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPost提交Json数据
            </summary>
            <param name="url">请求Url</param>
            <param name="json">提交Json数据</param>
            <param name="encoder">Json数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PostXmlString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPost提交Xml数据
            </summary>
            <param name="url">请求Url</param>
            <param name="xml">提交Xml数据</param>
            <param name="encoder">Xml数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PostData(System.String,System.String,System.Text.Encoding,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            通过HttpPost提交数据
            </summary>
            <param name="url">请求Url</param>
            <param name="data">提交字符数据</param>
            <param name="encoder">字符数据编码（默认为UTF-8）</param>
            <param name="mediaType">字符数据类型</param>
            <param name="queryDir">表单数据集合（Value可为有效的文件路径，否者均为文本text/text）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PutString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPut提交字符数据
            </summary>
            <param name="url">请求Url</param>
            <param name="data">提交字符数据</param>
            <param name="encoder">字符数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PutJsonString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPut提交Json数据
            </summary>
            <param name="url">请求Url</param>
            <param name="json">提交Json数据</param>
            <param name="encoder">Json数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PutXmlString(System.String,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            通过HttpPut提交Xml数据
            </summary>
            <param name="url">请求Url</param>
            <param name="xml">提交Xml数据</param>
            <param name="encoder">Xml数据编码（默认为UTF-8）</param>
            <param name="decoder">返回数据编码（默认为UTF-8）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.PutData(System.String,System.String,System.Text.Encoding,System.String,System.Int32)">
            <summary>
            通过HttpPut提交数据
            </summary>
            <param name="url">请求Url</param>
            <param name="data">提交字符数据</param>
            <param name="encoder">字符数据编码（默认为UTF-8）</param>
            <param name="mediaType">字符数据类型</param>
            <param name="timeout">请求超时时间（单位：秒）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.Delete(System.String)">
            <summary>
            通过HttpDelete提交数据
            </summary>
            <param name="url">请求Url</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.Delete(System.String,System.Int32)">
            <summary>
            通过HttpDelete提交数据
            </summary>
            <param name="url">请求Url</param>
            <param name="timeout">请求超时时间（单位：秒）</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.HttpClientHelpers.CurlPost(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            通过模拟CurlPost提交数据
            </summary>
            <param name="url">请求Url</param>
            <param name="queryDir">表单数据集合（Value可为有效的文件路径，否者均为文本text/text）</param>
            <param name="timeout">请求超时时间（单位：秒）</param>
            <returns></returns>
        </member>
        <member name="T:OYMLCN.Helpers.PaginationHelpers">
            <summary>
            分页页码辅助
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.Total">
            <summary>
            总数据长度
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.Limit">
            <summary>
            单页条目
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.Page">
            <summary>
            有效页码
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.Pages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.PrevPage">
            <summary>
            上一页页码
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.NextPage">
            <summary>
            下一页页码
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.ShowFirst">
            <summary>
            是否可显示首页
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.ShowLast">
            <summary>
            是否可显示末页
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.LeftSplit">
            <summary>
            是否需要左分隔符
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.RightSplit">
            <summary>
            是否需要右分隔符
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.IsLastPage">
            <summary>
            当前是最后一页
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.ShowPrev">
            <summary>
            是否显示下一页
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.ShowNext">
            <summary>
            是否显示下一页
            </summary>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.PageArray">
            <summary>
            主要页码数组
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.PaginationHelpers.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            分页页码辅助
            </summary>
            <param name="total">总页码</param>
            <param name="page">当前页码</param>
            <param name="limit">单页数量</param>
            <param name="length">页码栏长度</param>
        </member>
        <member name="P:OYMLCN.Helpers.PaginationHelpers.MaxPagination">
            <summary>
            最大页码
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.PaginationHelpers.GetValidPage(System.Int32)">
            <summary>
            获取有效页码
            </summary>
            <param name="targetPage">要跳转的页码</param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.Helpers.PaginationHelpers.GetPaginationArray(System.Int32)">
            <summary>
            获取基本页码列表
            </summary>
            <param name="length"></param>
        </member>
        <member name="T:OYMLCN.Helpers.ProcessHelpers">
            <summary>
            进程或线程相关操作
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.ProcessHelpers.Hold">
            <summary>
            挂起线程（Thread.Sleep一年）
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.ProcessHelpers.Kill(System.String)">
            <summary>
            杀掉指定名称的所有程序
            </summary>
            <param name="processName">程序名称</param>
        </member>
        <member name="P:OYMLCN.Helpers.ProcessHelpers.IsAdministrator">
            <summary>
            确定当前主体是否属于具有指定 Administrator 的 Windows 用户组
            </summary>
            <returns>如果当前主体是指定的 Administrator 用户组的成员，则为 true；否则为 false。</returns>
        </member>
        <member name="M:OYMLCN.Helpers.ProcessHelpers.RunAsAdministrator(System.IO.FileInfo,System.String[])">
            <summary>
            以管理员身份执行程序
            </summary>
            <param name="file"></param>
            <param name="args"></param>
        </member>
        <member name="T:OYMLCN.Helpers.ReleasingMemoryHelpers">
            <summary>
            内存释放辅助方法
            </summary>
        </member>
        <member name="M:OYMLCN.Helpers.ReleasingMemoryHelpers.ReleaseMemory(System.Boolean)">
            <summary>
            释放内存
            </summary>
            <param name="removePages">强迫症选项，将内存页大小设置为0</param>
        </member>
        <member name="M:OYMLCN.Helpers.ReleasingMemoryHelpers.StartTimingReleasing(System.Int32)">
            <summary>
            开启定时释放内存
            </summary>
        </member>
        Checker.IsNotEmpty(System.String,System.String)">
            <summary>
            非空判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotOutOfLength(System.String,System.Int32,System.String)">
            <summary>
            字符串长度限制判断
            </summary>
            <param name="argument"></param>
            <param name="length"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNull(System.Object,System.String,System.String)">
            <summary>
            非空判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
            <param name="message"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegative(System.Int32,System.String)">
            <summary>
            非负判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegativeOrZero(System.Int32,System.String)">
            <summary>
            正数非零判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegative(System.Int64,System.String)">
            <summary>
            非负判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegativeOrZero(System.Int64,System.String)">
            <summary>
            正数非零判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegative(System.Single,System.String)">
            <summary>
            非负判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegativeOrZero(System.Single,System.String)">
            <summary>
            正数非零判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegative(System.Decimal,System.String)">
            <summary>
            非负判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegativeOrZero(System.Decimal,System.String)">
            <summary>
            正数非零判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotInvalidDate(System.DateTime,System.String)">
            <summary>
            时间有效性判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotInPast(System.DateTime,System.String)">
            <summary>
            非过去的时间判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotInFuture(System.DateTime,System.String)">
            <summary>
            过去的时间判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegative(System.TimeSpan,System.String)">
            <summary>
            非负判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotNegativeOrZero(System.TimeSpan,System.String)">
            <summary>
            非负非零判断
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            非空判断
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            值范围判断
            </summary>
            <param name="argument"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotExistsFile(System.String,System.String)">
            <summary>
            文件不存在报错
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="M:OYMLCN.ArgumentChecker.IsNotExistsDirectory(System.String,System.String)">
            <summary>
            目录不存在报错
            </summary>
            <param name="argument"></param>
            <param name="argumentName"></param>
        </member>
        <member name="T:OYMLCN.EmailSender">
            <summary>
            邮件发送
            </summary>
        </member>
        <member name="M:OYMLCN.EmailSender.#ctor">
            <summary>
            仅用于继承
            </summary>
        </member>
        <member name="M:OYMLCN.EmailSender.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            邮件发送
            </summary>
            <param name="displayName">显示名称</param>
            <param name="smtp">SMTP地址</param>
            <param name="userName">邮箱地址/用户名</param>
            <param name="password">密码</param>
            <param name="port">端口（默认25）</param>
        </member>
        <member name="F:OYMLCN.EmailSender.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="F:OYMLCN.EmailSender.SMTP">
            <summary>
            SMTP地址
            </summary>
        </member>
        <member name="F:OYMLCN.EmailSender.UserName">
            <summary>
            邮箱地址/用户名
            </summary>
        </member>
        <member name="F:OYMLCN.EmailSender.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:OYMLCN.EmailSender.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="M:OYMLCN.EmailSender.SendEmail(System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="subject">主题</param>
            <param name="body">正文HTML</param>
            <param name="targets">目标邮箱</param>
            <returns>成功返回true，否则报错</returns>
        </member>
        <member name="T:OYMLCN.PredicateBuilder">
            <summary>    
            构建查询条件    
            </summary>    
        </member>
        <member name="M:OYMLCN.PredicateBuilder.True``1">
            <summary>
            起始条件为True
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.False``1">
            <summary>
            起始条件为False
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            创建条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合And条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Or条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Not条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
    </members>
</doc>
.Func{``0,System.Boolean}})">
            <summary>
            创建条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合And条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Or条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:OYMLCN.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Not条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
    </members>
</doc>
